<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>算法分析和抽象数据类型</title>
      <link href="/2022/11/03/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E5%92%8C%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2022/11/03/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E5%92%8C%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>clock（）：捕捉从程序开始运行到clock（）被调用所耗费的时间。这个时间单位是clock tick，即”时钟打点“。<br>常数CLK_TCK：机器时钟每秒所走的时钟打点数。</p><blockquote><p>C语言</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">MyFunction</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">clock_t</span> start, stop;</span><br><span class="line"><span class="comment">/* clock_t 是 clock()函数返回的变量类型 */</span></span><br><span class="line"><span class="type">double</span> duration;</span><br><span class="line"><span class="comment">/* 记录被测函数运行时间，以秒为单位 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;<span class="comment">/* 不在测试范围内的准备工作放在clock()调用之前 */</span></span><br><span class="line">    start = clock();<span class="comment">/* 开始计时 */</span></span><br><span class="line">    MyFunction();</span><br><span class="line">    stop = clock();</span><br><span class="line">    duration = ((<span class="type">double</span>)(stop - start))/CLK_TCK;</span><br><span class="line">    <span class="comment">/* 其他不在测试范围的处理写在后面，例如输出duration的值 */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="xVcFl"></a></p><h1 id="简介-gt-什么是数据结构"><a href="#简介-gt-什么是数据结构" class="headerlink" title="简介-&gt;什么是数据结构"></a>简介-&gt;什么是数据结构</h1><p><a name="kNw9b"></a></p><h2 id="数据对象在计算机中的组织方式"><a href="#数据对象在计算机中的组织方式" class="headerlink" title="数据对象在计算机中的组织方式"></a>数据对象在计算机中的组织方式</h2><p><a name="zkkRQ"></a></p><h3 id="✨逻辑结构"><a href="#✨逻辑结构" class="headerlink" title="✨逻辑结构"></a>✨逻辑结构</h3><p>一对一的结构，叫做”线性结构“</p><blockquote><p>如将所有书排成一列</p></blockquote><p>一对多的逻辑结构，叫做”树型结构“</p><blockquote><p>图书按类分</p></blockquote><p>多对多的复杂关系网，这个关系网叫做”图“<br><a name="i8Cbj"></a></p><h3 id="✨物理存储结构（如数组形式、链表形式……"><a href="#✨物理存储结构（如数组形式、链表形式……" class="headerlink" title="✨物理存储结构（如数组形式、链表形式……"></a>✨物理存储结构（如数组形式、链表形式……</h3><p>描述数据结构<br><a name="qzphG"></a></p><h4 id="抽象数据类型（Abstract-Data-Type）-ADT"><a href="#抽象数据类型（Abstract-Data-Type）-ADT" class="headerlink" title="抽象数据类型（Abstract Data Type）| ADT"></a>抽象数据类型（Abstract Data Type）| ADT</h4><ol><li>数据类型<ol><li>数据对象集</li><li>数据集合相关联的操作集</li></ol></li><li>抽象：描述数据类型的方法不依赖于具体实现<ol><li>与存放和数据的机器无关</li><li>与数据存储的物理结构无关</li><li>与实现操作的算法和编程语言均无关</li></ol></li></ol><p>只描述数据对象集和相关操作集”是什么“，并不涉及”如何做到“的问题<img src="https://cdn.nlark.com/yuque/0/2022/png/27904580/1659343237988-1e32e236-aed0-48c6-9eea-6135929b5533.png#clientId=uf74e5c40-d564-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=460&id=uab3a70e9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=575&originWidth=860&originalType=binary&ratio=1&rotation=0&showTitle=false&size=414632&status=done&style=none&taskId=u913a6b5d-ea44-4ed9-b5f6-9807d46f610&title=&width=688" alt="image.png"><br>其中的抽象可以从如下看<br>eg：ElementType是通用数据类型（抽象），需要double ，在前面define即可<br>eg：矩阵是用二维数组、一维数组还是十字链表实现的都不重要，只是实现一个矩阵<br>eg：Matrix Add中不在乎按行加还是按列加，用什么语言实现都不在乎<br>✨抽象的好处-&gt;一方面是提高程序的复用性，另一方面，让我们侧重去了解程序的逻辑结构</p><hr><p><a name="X8M7W"></a></p><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><p><a name="nGG37"></a></p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><a name="fN1oH"></a></p><h3 id="✨算法（Algorithm）"><a href="#✨算法（Algorithm）" class="headerlink" title="✨算法（Algorithm）"></a>✨算法（Algorithm）</h3><ol><li>一个有限指令集</li><li>接受一些输入（有些情况下不需要输入）</li><li>产生输出</li><li>一定在有限步骤之后终止</li><li>每一条指令必须<ol><li>有充分明确的目标，不可以产生歧义</li><li>计算机能处理的范围之内</li><li>描述应不依赖于任何一种计算机语言及具体的实现手段<br><a name="wXFOt"></a></li></ol></li></ol><h2 id="衡量算法的两个指标"><a href="#衡量算法的两个指标" class="headerlink" title="衡量算法的两个指标"></a>衡量算法的两个指标</h2><p><a name="izD40"></a></p><h3 id="✨空间复杂度S-n"><a href="#✨空间复杂度S-n" class="headerlink" title="✨空间复杂度S(n)"></a>✨空间复杂度S(n)</h3><p>根据算法写成的程序在执行时<strong>占用存储单元的长度</strong>。这个长度往往与输入数据的规模有关。空间复杂度过高的算法可能导致使用的内存超限，造成程序非正常中断。<br><a name="FO2Zy"></a></p><h3 id="✨时间复杂度T-n"><a href="#✨时间复杂度T-n" class="headerlink" title="✨时间复杂度T(n)"></a>✨时间复杂度T(n)</h3><p>根据算法写成的程序在执行时<strong>耗费时间的长度</strong>。这个长度往往也与输入数据的规模有关。<br><a name="QR0wP"></a></p><h2 id="复杂度的渐进表示法"><a href="#复杂度的渐进表示法" class="headerlink" title="复杂度的渐进表示法"></a>复杂度的渐进表示法</h2><ol><li>T(n) &#x3D;  O  (f(n)) 表示存在常数C&gt;0, n0 &gt; 0使得当n &gt;&#x3D;  n0时有T(n)&lt;&#x3D;C×f(n)</li><li>T(n) &#x3D;$\Omega$(g(n))表示存在常数C&gt;0，n0&gt;0使得当n&gt;&#x3D;n0时有T(n) &gt;&#x3D; C×g(n)</li><li>T(n) &#x3D;$\Theta$(h(n))表示同时有T(n) &#x3D; O(h(n))和T(n) &#x3D; $\Omega$(h(n))<br><a name="lALu4"></a></li></ol><h2 id="TIPs"><a href="#TIPs" class="headerlink" title="TIPs"></a>TIPs</h2><ol><li>若有两段算法分别有复杂度T1(n) &#x3D; O(f1(n))和T2(n) &#x3D; O(f2(n))，则<ol><li>T1(n) + T2(n) &#x3D; max(O(f1(n)), O(f2(n))) &lt;表示两个算法拼接起来</li><li>T1(n) $\times$T2(n) &#x3D; O(f1(n)$\times$f2(n)) &lt;表示两个算法嵌套起来</li></ol></li><li>若T(n)是关于n的k阶多项式，那么T(n)&#x3D;$\Theta$(nk)</li><li>一个for循环的时间复杂度等于循环次数乘以循环体代码的复杂度</li><li>if-else结构的复杂度取决于if的条件判断复杂度和两个分支部分的复杂度，总体复杂度取三者中最大<br><a name="ZQjKQ"></a></li></ol><h2 id="Checking-Your-Analysis"><a href="#Checking-Your-Analysis" class="headerlink" title="Checking Your Analysis"></a>Checking Your Analysis</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/27904580/1663673834911-9adee8ce-e352-4f23-9727-6386d1f0083d.png#clientId=u3b6968f0-75d2-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=411&id=ue2d94756&margin=%5Bobject%20Object%5D&name=image.png&originHeight=514&originWidth=699&originalType=binary&ratio=1&rotation=0&showTitle=false&size=172143&status=done&style=none&taskId=u32548eab-1cc6-48bd-aadc-b0568096415&title=&width=559.2" alt="image.png"></p><blockquote><p>一个分析复杂度的方法</p></blockquote><p><a name="rRAIy"></a></p><h2 id="主定理-Master"><a href="#主定理-Master" class="headerlink" title="主定理 | Master"></a>主定理 | Master</h2><p><a name="tdwp7"></a></p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Master定理，又称主定理，用于程序的时间复杂度计算（常用于递归调用算法的时间复杂度）<br><a name="e1nH3"></a></p><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>递归算法时间复杂度形如：</p><ol><li>$T(n) &#x3D; O(1), n &#x3D; 1$</li><li>$T(n) &#x3D; aT(\frac{n}{b}) + f(n) , n &gt; 1$</li></ol><p>其中，$a \ge 1; b &gt; 1 ;$$f(n)$表示不参与递归部分的时间复杂度<br>规定$C_{crit}&#x3D;log_ba$</p><blockquote><p>第二条公式表示：将一个规模为n的问题分为$a$个规模为$\frac{n}{b}$子问题，每次递归将带来$f(n)$的额外计算，然后通过对这$a$个子问题的解的综合，得到原问题的解</p></blockquote><p>那么有：</p><ol><li><p>当$f(n) &#x3D; O(n^c)$，且$c &lt; C_{crit}$时有： $T(n) &#x3D; \Theta(n^{C_{crit}})$</p><blockquote><p>eg：<br>$T(n) &#x3D; 8T(\frac{n}{2}) + 1000n^2$<br>此时$a&#x3D;8, b&#x3D;2, f(n)&#x3D;1000n^2$<br>$c&#x3D;2&lt;3&#x3D;log_ba&#x3D;C_{crit}$<br>故 $T(n)&#x3D;\Theta(n^3)$</p></blockquote></li><li><p>当$f(n)&#x3D;O(n^c)$, 且$c &gt; C_{crit}$时有：$T(n)&#x3D;\Theta(f(n))$</p><blockquote><p>eg:<br>$T(n) &#x3D; 2T(\frac{n}{2}) + n^2$<br>此时$a&#x3D;2, b&#x3D;2, f(n)&#x3D;n^2$<br>$c&#x3D;2 &gt; 1&#x3D;log_ba&#x3D;C_{crit}$<br>故$T(n)&#x3D;\Theta(n^2)$</p></blockquote></li><li><p>若存在非负整数$k$，使得$f(n)&#x3D;\Theta(n^{C_{crit}}log_kn)$，那么$T(n)&#x3D;\Theta(n^{C_{crit}}log_{k+1}n)$</p><blockquote><p>参考：</p><ol><li><a href="https://www.cnblogs.com/nwnu-daizh/p/8652285.html">算法时间复杂度分析方法 - 代祖华 - 博客园</a></li><li><a href="https://www.cnblogs.com/water-mi/p/9794604.html">Master定理学习笔记 - water_mi - 博客园</a></li></ol></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> FDS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>大一下</title>
      <link href="/2022/08/02/%E5%A4%A7%E4%B8%80%E4%B8%8B/"/>
      <url>/2022/08/02/%E5%A4%A7%E4%B8%80%E4%B8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="中国近代史纲要"><a href="#中国近代史纲要" class="headerlink" title="中国近代史纲要"></a>中国近代史纲要</h1><p>zh老师讲的真的很好，可惜我听的次数不多😓。<br>真诚劝大噶好好完成小组作业，对自己负责也是对小组负责；<br>期末只浅浅地把课本翻了一遍（把每章有什么内容熟悉一下）就上考场了，成绩还行；<br>一句话“zh老师真的超级好！！！”</p><hr><h1 id="体适能"><a href="#体适能" class="headerlink" title="体适能"></a>体适能</h1><h2 id="课程简介：可以理解为体能，课程内容就是静态拉伸-动态拉伸-体能训练or身体协调-x2F-平衡性练习……"><a href="#课程简介：可以理解为体能，课程内容就是静态拉伸-动态拉伸-体能训练or身体协调-x2F-平衡性练习……" class="headerlink" title="课程简介：可以理解为体能，课程内容就是静态拉伸+动态拉伸+体能训练or身体协调&#x2F;平衡性练习……"></a>课程简介：可以理解为体能，课程内容就是静态拉伸+动态拉伸+体能训练or身体协调&#x2F;平衡性练习……</h2><p>早八的体适能有时候蛮顶的（自己跑or走七圈）；<br>zcx老师真的超级温柔😍，会教你无器械的热身和训练动作，而且幸运的话你可以在体适能课程上体验其他课程的内容（比如体验定向越野，看着定向越野的uu们在校园奔跑，而我们慢慢悠悠地走；</p><blockquote><p>划重点:体适能的考核是4 * 10米折返跑，想要拿满分挺难的（我的课上只有一名女生拿了满分），不过如果你可以把其他项搞一下还是可以满绩的。</p></blockquote><hr><h1 id="形势与政策Ⅰ"><a href="#形势与政策Ⅰ" class="headerlink" title="形势与政策Ⅰ"></a>形势与政策Ⅰ</h1><p>这门课就不多说了，期末几乎全靠党性觉悟（懂得都懂😎）</p><hr><h1 id="大学物理（乙）Ⅰ"><a href="#大学物理（乙）Ⅰ" class="headerlink" title="大学物理（乙）Ⅰ"></a>大学物理（乙）Ⅰ</h1><p>这学期最后悔没有好好学的一门课。<br>在期中考试之前，觉得内容很简单便懈怠了，每周只有写作业的时候才去看书学导致期中考试和其前的小测都十分拉跨；<br>期中之后醒悟过来开始好好听课学，虽然后面的小测和期末都考得好但是还是补不回来（因为大家都考的很好</p><hr><h1 id="信息安全原理与数学基础"><a href="#信息安全原理与数学基础" class="headerlink" title="信息安全原理与数学基础"></a>信息安全原理与数学基础</h1><h2 id="课程简介：这门课可以说是离散数学和概率论合在一起了-，不过相对于单独的离散和概率论课程，信安原理与数学基础教的内容要浅且考试难度低"><a href="#课程简介：这门课可以说是离散数学和概率论合在一起了-，不过相对于单独的离散和概率论课程，信安原理与数学基础教的内容要浅且考试难度低" class="headerlink" title="课程简介：这门课可以说是离散数学和概率论合在一起了 ，不过相对于单独的离散和概率论课程，信安原理与数学基础教的内容要浅且考试难度低"></a>课程简介：这门课可以说是离散数学和概率论合在一起了 ，不过相对于单独的离散和概率论课程，信安原理与数学基础教的内容要浅且考试难度低</h2><p>私以为zbs和qz老师都教的超级好。<br>对zbs老师一整个爱住，他可以用超通俗的语言让你学会离散；<br>而对qz老师，我很喜欢他教课的节奏。<br>总结下来：平时的积累很重要，只要你把平时教的内容记住了（知道哪个知识点是什么），即便你不精通你也可以拿满绩（六小时速成离散+概率论失败的教训）</p><hr><h1 id="大学英语Ⅳ"><a href="#大学英语Ⅳ" class="headerlink" title="大学英语Ⅳ"></a>大学英语Ⅳ</h1><p>有一说一，xhh老师很负责，如果你真的想提升自己的水平可以去冲。<br>但是从我的角度来说，平时作业有点太多了（它有着这个学分不该有的作业量）😶。</p><hr><h1 id="微积分（甲）Ⅱ"><a href="#微积分（甲）Ⅱ" class="headerlink" title="微积分（甲）Ⅱ"></a>微积分（甲）Ⅱ</h1><p>bwh老师是真的超级负责——上课ipad手写+课后把笔记发到钉钉+各种提醒；<br>如果你喜欢讲课详细的老师，bwh老师绝对是首选；<br>可惜我在这门课上付出的精力不是特别多，期中之前我还会认真听课、写作业。but期中之后，迫于其他课程作业的逼迫+我的效率低，我开始只看她的讲稿了。期末的时候也没能腾出时间完整地复习一遍……</p><blockquote><p>忠告：微（甲）Ⅰ你还能靠期末补天补回来，微（甲）Ⅱ最好平常还是认真刷一些题的好，把定义都能清楚</p></blockquote><hr><h1 id="汇编语言"><a href="#汇编语言" class="headerlink" title="汇编语言"></a>汇编语言</h1><p>深深被小白的技术折服（他漫不经心的凡尔赛我真的爱了）<br>虽然是刚好没挂、绩点最拉跨的一门专业课，但是（抛去期末不谈）我觉得是我这学年上的最有意思的课；<br>那为什么最后的绩点那么拉跨呢？<br>因为本人太过摆烂，好多汇编指令和知识并没有熟悉掌握，每次做作业基本还得再复习一遍（汇编的作业还是蛮有意思的）。期末复习的时候就是说没有复习全面导致好多好多题在同一个指令上卡壳。</p><hr><h1 id="程序设计专题"><a href="#程序设计专题" class="headerlink" title="程序设计专题"></a>程序设计专题</h1><p>相对于C小，这门课进步蛮大的（也算是开始对编程有了些许开窍的感觉）。<br>在这门课上花费的时间还是蛮多的，尤其大作业占去我好多天的时间，主要前后换了三种思路，换一次重新写一次。真正把思路定下来到初步写完时间就不是特别长了，唯一的遗憾就是游戏粗糙了一点<br>（本来准备先提交，等之后再把我想加 的功能写一下，然后就没有然后了😂</p><hr><h1 id="计算机系统Ⅰ"><a href="#计算机系统Ⅰ" class="headerlink" title="计算机系统Ⅰ"></a>计算机系统Ⅰ</h1><h2 id="课程简介：本门课有计算机系统Ⅰ-x2F-Ⅱ-x2F-Ⅲ是这两年信息安全专业新开的课程，包含计算机逻辑设计基础和计算机组成与设计的部分内容"><a href="#课程简介：本门课有计算机系统Ⅰ-x2F-Ⅱ-x2F-Ⅲ是这两年信息安全专业新开的课程，包含计算机逻辑设计基础和计算机组成与设计的部分内容" class="headerlink" title="课程简介：本门课有计算机系统Ⅰ&#x2F;Ⅱ&#x2F;Ⅲ是这两年信息安全专业新开的课程，包含计算机逻辑设计基础和计算机组成与设计的部分内容"></a>课程简介：本门课有计算机系统Ⅰ&#x2F;Ⅱ&#x2F;Ⅲ是这两年信息安全专业新开的课程，包含计算机逻辑设计基础和计算机组成与设计的部分内容</h2><p>这门课有很多想说的：</p><ol><li>相对别的课程，我在这门课上投入是最多的，同时收获也是最多的（好多奇奇怪怪的东西都是在做作业的时候学的）；</li><li>印象最深的例子：因为酷爱作死，把window上安装好的docker玩坏了，然后灰溜溜地去查baidu,各种尝试失败我一气之下把安装的Ubuntu卸了然后准备重新装，但是谁曾想要把所有文件完全清除再次安装后才能正常使用。电脑小白的我开始翻文件、删文件、翻文件、删文件……后来我突然成功了，可以正常使用了。</li></ol><p>这个时候，让我无语的事情出现了，我汇编用的VMware虚拟机用不了了。然后又是一通搜索，终于我选择把系统升级一下。把win10升到win11后，十分开心，我的VMware虚拟机可以用了（我至今也不理解为什么就能用了）。but无语的事情再次出现，docker又用不了了（当时我真想把电脑砸了），然后实验课的时候我去问TA，他竟这么说“那确实出现了一些错误，用不了了，你自己建个虚拟机在虚拟机里面配一个docker吧“（我真的栓Q）。<br>幸好我在网上找到了教程，我就开始在VMware里面新建一个镜像、配docker。在我的摸索下，终于成功了&#x2F;(ㄒoㄒ)&#x2F;~~</p><blockquote><p>上述例子告诉我们，作死是好事，你可以学到很多知识。同时也告诉我们作死要分时间，如果再给我一次机会，我绝不会在快到ddl的时候拿自己做作业用的家伙什作。</p></blockquote><ol start="3"><li>做完最后的单周期CPU还是有一些感悟的——虽然我很菜，但是静下心来仔细想想还是能把作业做好的。期待Ⅱ&#x2F;Ⅲ  &amp; 希望别再摆烂。</li></ol><hr><h1 id="一些反思-amp-总结"><a href="#一些反思-amp-总结" class="headerlink" title="一些反思&amp;总结"></a>一些反思&amp;总结</h1><ol><li>这学年与其说投入学习的时间很多很多，不如说投入作业的时间很多很多。最大的问题在于效率太低了，我自己都能感觉到的低。可能还是没有从大一上那种比较悠闲的节奏上转变过来（或者说是内心不想接受这个事实而自欺欺人，想着躺平）；</li><li>除学业外的工作做的还说的过去——虽然有一些活动我没有参加，但是参加的都尽力了；</li></ol><h2 id="一些flag"><a href="#一些flag" class="headerlink" title="一些flag"></a>一些flag</h2><ol><li>希望把自己的效率提起来、少拖沓，省出时间去做想做的事情；</li><li>不得过且过、自欺欺人，用心去掌握知识；</li><li>把我这难看的GPA提一提。</li></ol><blockquote><p>相关学习资料链接会在很久很久很久之后发出来😥</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> memory </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>为什么决定做这个网页</title>
      <link href="/2022/08/02/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%86%B3%E5%AE%9A%E5%81%9A%E8%BF%99%E4%B8%AA%E7%BD%91%E9%A1%B5/"/>
      <url>/2022/08/02/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%86%B3%E5%AE%9A%E5%81%9A%E8%BF%99%E4%B8%AA%E7%BD%91%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[<p>为了学习 ❌<br>为了装* ✔️</p><hr><p>💬过了2022年9月7日，我就加入奔三人群大军了😔，有必要给自己短暂的青春留下一点记录了；<br>💬经过一年的ZJU生活，有一些想说的话（老人的劝告心理😥<br>💬（主要原因）看着自己难看的GPA开始深深反思自己的躺平大一，并且发现这么下去我将难以实现我的目标。内心的羞耻和惭愧让我决定做一个网页来记录我的总结和一些些反思（maybe对别人有一丢丢参考价值👀</p><blockquote><p>不建议打赏（但如果你非常愿意打赏，我也没有办法拒绝👀</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
